generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id        String    @id @db.Uuid
  Email     String    @unique
  Password  String
  IsActive  Boolean   @default(true)
  CreatedAt DateTime
  UpdatedAt DateTime?

  UserRoles      UserRole[] // Relation to the associative table
  UserProperties UserProperty[] @relation("UserToUserProperty")

  @@index([Email])
}

model UserProperty {
  Id            String    @id @db.Uuid
  UserId_FK     String?   @db.Uuid
  PropertyId_FK String    @db.Uuid
  CreatedAt     DateTime
  UpdatedAt     DateTime?
  IsActive      Boolean   @default(true)

  User     User?     @relation("UserToUserProperty", fields: [UserId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Property Property? @relation("PropertyToUserProperty", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([UserId_FK, PropertyId_FK])
  @@index([UserId_FK], map: "fki_FKeyUserPropertyToUser")
  @@index([PropertyId_FK], map: "fki_FKeyUserPropertyToProperty")
}

model Role {
  Id          String    @id @db.Uuid
  Name        String    @unique // e.g., "ADMIN", "USER"
  Description String?
  IsActive    Boolean   @default(true)
  CreatedAt   DateTime
  UpdatedAt   DateTime?

  UserRoles   UserRole[] // Relation to the associative table
  Permissions RolePermission[] // Relation to permissions (optional)

  @@index([Name, IsActive, CreatedAt])
}

model UserRole {
  Id        String @id @db.Uuid
  UserId_FK String @db.Uuid
  RoleId_FK String @db.Uuid
  User      User   @relation(fields: [UserId_FK], references: [Id])
  Role      Role   @relation(fields: [RoleId_FK], references: [Id])

  @@unique([UserId_FK, RoleId_FK]) // Ensure a user can't have the same role twice
  @@index([UserId_FK], map: "fki_FkeyUser")
  @@index([RoleId_FK], map: "fki_FkeyRole")
}

model Permission {
  Id          String    @id @db.Uuid
  Name        String    @unique // e.g., "read:users", "write:users"
  Description String?
  IsActive    Boolean   @default(true)
  CreatedAt   DateTime
  UpdatedAt   DateTime?

  Roles RolePermission[] // Relation to roles (optional)

  @@index([Name, IsActive, CreatedAt])
}

model RolePermission {
  Id              String     @id @db.Uuid
  RoleId_FK       String     @db.Uuid
  PermissionId_FK String     @db.Uuid
  Role            Role       @relation(fields: [RoleId_FK], references: [Id])
  Permission      Permission @relation(fields: [PermissionId_FK], references: [Id])

  @@unique([RoleId_FK, PermissionId_FK]) // Ensure a role can't have the same permission twice
  @@index([RoleId_FK], map: "fki_FkeyRolePermissionToRole")
  @@index([PermissionId_FK], map: "fki_FkeyRolePermissionToPermission")
}

model AuditLogs {
  Id                          String    @id @db.Uuid
  ReferrenceId                String?
  ReferrenceType              String?
  Notes                       String?
  ThirdPartySubscriptionId_FK String?   @db.Uuid
  CreatedAt                   DateTime?

  ThirdPartySubscription ThirdPartySubscription? @relation(fields: [ThirdPartySubscriptionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FkeySubscription")

  @@index([ThirdPartySubscriptionId_FK, CreatedAt], map: "fki_FkeySubscription")
}

model GuestGroupMembers {
  Id              String    @id @db.Uuid
  GuestGroupId_FK String    @db.Uuid
  GuestId_FK      String    @db.Uuid
  IsPrimaryGuest  String?
  GuestShare      String?
  CreatedAt       DateTime
  UpdatedAt       DateTime?

  GuestGroups GuestGroups @relation(fields: [GuestGroupId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyGroup")
  Guests      Guests      @relation(fields: [GuestId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyGuestKey")

  @@index([GuestGroupId_FK], map: "fki_FKeyGroup")
  @@index([GuestId_FK], map: "fki_FKeyGuestKey")
  @@index([CreatedAt])
}

model GuestGroups {
  Id             String    @id @db.Uuid
  GuestGroupCode String
  GuestGroupType String?
  GuestGroupName String
  Description    String?
  PropertyId_FK  String    @db.Uuid
  CreatedAt      DateTime?
  UpdatedAt      DateTime?

  Property          Property            @relation("PropertyToGuestGroups", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  GuestGroupMembers GuestGroupMembers[]

  @@index([GuestGroupCode, PropertyId_FK, CreatedAt])
}

model GuestMembership {
  Id                  String  @id @db.Uuid
  Guest_Id            String  @db.Uuid
  TierLevel           String?
  PointsBalance       Int?    @default(0)
  TotalPointsEarned   Int?    @default(0)
  TotalPointsRedeemed Int?    @default(0)
  EnrollDate          String?
  EndDate             String?
  LastActivityDate    String?
  EligibleRewards     String?
  Status              String?
  Notes               String?
  IsActive            String?
  Guests              Guests  @relation(fields: [Guest_Id], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKey_Guest_Membership")

  @@index([Guest_Id])
}

model GuestStayHistory {
  Id                   String    @id @db.Uuid
  ReservationId_FK     String    @db.Uuid
  RoomId_FK            String    @db.Uuid
  NumberOfAdults       Int
  NumberOfChilden      Int?
  ActualCheckedInDate  String?
  ActualCheckedOutDate String?
  Notes                String?
  IsShared             String?
  GuestId_FK           String    @db.Uuid
  UpdatedBy            String?
  CreatedAt            DateTime
  UpdatedAt            DateTime?

  Guests       Guests       @relation(fields: [GuestId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyGuest_StayDet")
  Reservations Reservations @relation(fields: [ReservationId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyReservation_GSH")
  Rooms        Rooms        @relation(fields: [RoomId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyRoomID")

  @@index([ReservationId_FK], map: "fki_FKeyReservation_GSH")
  @@index([RoomId_FK], map: "fki_FKeyRoomID")
  @@index([GuestId_FK, CreatedAt])
}

model Guests {
  Id              String    @id @db.Uuid
  GuestType       String
  FirstName       String
  LastName        String
  Gender          String?
  DOB             String?
  Photo           Bytes?
  Email           String?
  Phone           String?
  Address         Json?     @db.Json
  Country         String?
  Language        String?
  NumberOfVisits  Int?      @db.SmallInt
  LastVisitedDate String?
  Comments        String?
  GuestCode       String?
  CreatedAt       DateTime?
  UpdatedAt       DateTime?

  GuestGroupMembers GuestGroupMembers[]
  GuestMembership   GuestMembership[]
  Reservations      Reservations[]
  GuestStayHistory  GuestStayHistory[]
  Calls             Call[]              @relation("GuestToCall")

  @@index([GuestType, Email, Phone, GuestCode])
}

model ReservationDetails {
  Id               String    @id @db.Uuid
  ReservationId_FK String    @db.Uuid
  NumberOfRooms    String
  Notes            String?
  RoomTypeId_FK    String    @db.Uuid
  CreatedAt        DateTime
  UpdatedAt        DateTime?

  Reservations Reservations @relation(fields: [ReservationId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyReservation")
  RoomType     RoomType     @relation(fields: [RoomTypeId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyRoomType_RD")

  @@index([ReservationId_FK], map: "fki_FKeyReservation")
  @@index([RoomTypeId_FK], map: "fki_FKeyRoomType_RD")
  @@index([CreatedAt])
}

model Reservations {
  Id                              String    @id @db.Uuid
  PropertyId_FK                   String    @db.Uuid
  ReservationCode                 String
  ReservationSource               String
  ReservationDate                 String
  ReservationType                 String
  PromotionId_FK                  String?   @db.Uuid
  PrimaryGuestID_FK               String    @db.Uuid
  GuestGroupMembersId_FK          String?   @db.Uuid
  PrimaryGuestName                String
  UtcTentativeCheckedInDate       String?
  CheckInDate                     String?
  UtcTentativeCheckedOutDate      String?
  CheckOutDate                    String?
  ReservationStatus               String
  LastReservationStatusChangeDate String?
  NumberOfAdults                  String
  NumberOfChilden                 String?
  Notes                           String?
  TemporaryLockDate               String?
  IsAutoSystemReservation         String?
  UtcReservationDate              String?
  UtcCheckInDate                  String?
  UtcCheckOutDate                 String?
  CreatedAt                       String
  UpdatedAt                       DateTime?
  UpdatedBy                       DateTime?

  Property           Property             @relation("PropertyToReservations", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  GuestStayHistory   GuestStayHistory[]
  ReservationDetails ReservationDetails[]
  Guests             Guests               @relation(fields: [PrimaryGuestID_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FkeyGuest")

  @@index([PrimaryGuestID_FK], map: "fki_FkeyGuest")
  @@index([GuestGroupMembersId_FK], map: "fki_FkeyGuestGroupMember")
  @@index([CreatedAt])
}

model RoomType {
  Id            String    @id @db.Uuid
  PropertyId_FK String    @db.Uuid
  Property      Property  @relation("PropertyToRoomType", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  RoomTypeName  String
  IsActive      String
  Notes         String?
  CreatedAt     DateTime
  UpdatedAt     DateTime?

  ReservationDetails ReservationDetails[]
  Rooms              Rooms[]

  @@index([CreatedAt])
}

model Rooms {
  Id                String    @id @db.Uuid
  PropertyId_FK     String    @db.Uuid
  RoomTypeId_FK     String    @db.Uuid
  BuildingNo        String?
  FloorNo           String?
  RoomNo            String
  RoomStatus        String?
  NumberOfRooms     String?
  NumberOfBeds      String?
  NumberOfBathrooms String?
  MaxCapacity       String?
  IsActive          String
  CreatedAt         DateTime
  UpdatedAt         DateTime?

  Property         Property           @relation("PropertyToRooms", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  GuestStayHistory GuestStayHistory[]
  RoomType         RoomType           @relation(fields: [RoomTypeId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FkeyRoomType_Rooms")
  RoomExtensions   RoomExtensions[]   @relation("RoomToRoomExtensions")

  @@index([RoomTypeId_FK], map: "fki_FkeyRoomType_Rooms")
  @@index([CreatedAt])
}

// model StayingGuestDetails {
//   Id                    String           @id(map: "StayingGuestDet_pkey") @db.Uuid
//   GuestStayHistoryId_FK String           @db.Uuid
//   CreatedAt             String
//   UpdatedAt             String?
//   GuestName             String?
//   GuestStayHistory      GuestStayHistory @relation(fields: [GuestStayHistoryId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FKeyGSH")

//   @@index([GuestStayHistoryId_FK], map: "fki_FKeyGSH")
//   @@index([GuestId_FK], map: "fki_FKeyGuest_StayDet")
// }

model ThirdPartySubscription {
  Id               String   @id @db.Uuid
  Source           String?
  SubscriptionData String
  ProcessStatus    String?
  ErrorMessage     String?
  ProcessDate      String?
  RetryNo          Int?     @default(0) @db.SmallInt
  EventType        String?
  CreatedAt        DateTime

  AuditLogs AuditLogs[]
}

model Extensions {
  Id                  String               @id @db.Uuid
  PropertyId_FK       String               @db.Uuid
  Property            Property             @relation("PropertyToExtensions", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  ExtensionNumber     String
  Notes               String?
  Category            String?
  DivisionId_FK       String?              @db.Uuid
  DepartmentId_FK     String?              @db.Uuid
  SubDepartmentId_FK  String?              @db.Uuid
  FirstName           String?
  LastName            String?
  UserName            String?
  LinePort1           String?
  LinePort2           String?
  LinePort3           String?
  BuildingCode        String?
  VoiceMailPassword   String?
  VmCapable           String?
  DndCapable          String?
  JazzUserId          String?
  PbxNum              String?
  AdditionalSpUserId  String?
  IsActive            String?
  CreatedAt           DateTime
  UpdatedAt           DateTime?
  RoomExtensions      RoomExtensions[]     @relation("ExtensionToRoomExtensions")
  Calls               Call[]               @relation("ExtensionToCall")
  SpeedDialExtensions SpeedDialExtension[] @relation("ExtensionToSpeedDialExtension")

  Division      Division?      @relation("ExtensionToDivision", fields: [DivisionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Department    Department?    @relation("ExtensionToDepartment", fields: [DepartmentId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  SubDepartment SubDepartment? @relation("ExtensionToSubDepartment", fields: [SubDepartmentId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([PropertyId_FK, ExtensionNumber], map: "Property_Extension")
}

model RoomExtensions {
  Id             String    @id @db.Uuid
  RoomId_FK      String    @db.Uuid
  ExtensionId_FK String    @db.Uuid
  IsActive       String?
  Notes          String?
  CreatedAt      DateTime
  UpdatedAt      DateTime?

  Rooms      Rooms      @relation("RoomToRoomExtensions", fields: [RoomId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Extensions Extensions @relation("ExtensionToRoomExtensions", fields: [ExtensionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([RoomId_FK, ExtensionId_FK], map: "Room_Extension")
}

model Call {
  Id             String      @id @db.Uuid
  ExtensionId_FK String?     @db.Uuid
  GuestId_FK     String?     @db.Uuid
  Extension      Extensions? @relation("ExtensionToCall", fields: [ExtensionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Guest          Guests?     @relation("GuestToCall", fields: [GuestId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  CallType       String
  CallStatus     String
  CallDuration   Float?
  VoiceMail      String?
  NextWakeUpCall DateTime?
  CreatedAt      DateTime
  UpdatedAt      DateTime?

  @@index([ExtensionId_FK, CreatedAt])
}

model Property {
  Id        String    @id @db.Uuid
  Name      String
  Address   String?
  CreatedAt DateTime
  UpdatedAt DateTime?

  RoomTypes      RoomType[]      @relation("PropertyToRoomType")
  Rooms          Rooms[]         @relation("PropertyToRooms")
  Reservations   Reservations[]  @relation("PropertyToReservations")
  Extensions     Extensions[]    @relation("PropertyToExtensions")
  GuestGroups    GuestGroups[]   @relation("PropertyToGuestGroups")
  UserProperties UserProperty[]  @relation("PropertyToUserProperty")
  Divisions      Division[]      @relation("DivisionToProperty")
  Department     Department[]    @relation("DepartmentToProperty")
  SubDepartment  SubDepartment[] @relation("SubDepartmentToProperty")

  @@index([CreatedAt])
}

model Division {
  Id            String    @id @db.Uuid
  Name          String
  PropertyId_FK String    @db.Uuid
  Property      Property? @relation("DivisionToProperty", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  CreatedAt     DateTime
  UpdatedAt     DateTime?

  Departments    Department[]    @relation("DepartmentToDivision")
  SubDepartments SubDepartment[] @relation("SubDepartmentToDivision")
  Extensions     Extensions[]    @relation("ExtensionToDivision")

  @@unique([Name, PropertyId_FK])
  @@index([CreatedAt, PropertyId_FK])
}

model Department {
  Id            String    @id @db.Uuid
  Name          String
  PropertyId_FK String    @db.Uuid
  DivisionId_FK String?   @db.Uuid
  CreatedAt     DateTime
  UpdatedAt     DateTime?

  Property       Property?       @relation("DepartmentToProperty", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Division       Division?       @relation("DepartmentToDivision", fields: [DivisionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  SubDepartments SubDepartment[] @relation("SubDepartmentToDepartment")
  Extensions     Extensions[]    @relation("ExtensionToDepartment")

  @@unique([Name, PropertyId_FK, DivisionId_FK])
  @@index([CreatedAt, PropertyId_FK, DivisionId_FK])
}

model SubDepartment {
  Id              String    @id @db.Uuid
  Name            String
  PropertyId_FK   String    @db.Uuid
  DivisionId_FK   String?   @db.Uuid
  DepartmentId_FK String?   @db.Uuid
  CreatedAt       DateTime
  UpdatedAt       DateTime?

  //relations
  Property   Property?    @relation("SubDepartmentToProperty", fields: [PropertyId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Division   Division?    @relation("SubDepartmentToDivision", fields: [DivisionId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Department Department?  @relation("SubDepartmentToDepartment", fields: [DepartmentId_FK], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Extensions Extensions[] @relation("ExtensionToSubDepartment")

  @@unique([Name, PropertyId_FK, DivisionId_FK, DepartmentId_FK])
  @@index([CreatedAt, PropertyId_FK, DivisionId_FK, DepartmentId_FK])
}

model SpeedDialExtension {
  Id             String    @id @db.Uuid
  ExtensionId_FK String    @db.Uuid
  ServiceType    String
  IsActive       Boolean   @default(true)
  CreatedAt      DateTime
  UpdatedAt      DateTime?

  Extension Extensions? @relation("ExtensionToSpeedDialExtension", fields: [ExtensionId_FK], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([ServiceType, ExtensionId_FK])
}
